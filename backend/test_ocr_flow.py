#!/usr/bin/env python3
"""
Script de teste para verificar o fluxo completo:
OCR (Azure Vision) ‚Üí Corre√ß√µes (GPT) ‚Üí An√°lise ENEM

Testa a API REST do backend usando a imagem teste.png
"""

import os
import sys
import json
import base64
import requests
import time
from pathlib import Path

# Configura√ß√µes
BACKEND_URL = "http://localhost:3000"
IMAGE_PATH = "image/teste.png"

def print_header(title):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "=" * 80)
    print(f"üî¨ {title}")
    print("=" * 80)

def print_section(title):
    """Imprime se√ß√£o formatada"""
    print(f"\nüìã {title}")
    print("-" * 60)

def load_test_image():
    """Carrega a imagem de teste e converte para base64"""
    image_path = Path(IMAGE_PATH)
    
    if not image_path.exists():
        raise FileNotFoundError(f"Imagem n√£o encontrada: {image_path.absolute()}")
    
    print(f"üì∑ Carregando imagem: {image_path.absolute()}")
    print(f"üìè Tamanho do arquivo: {image_path.stat().st_size / 1024:.2f} KB")
    
    with open(image_path, 'rb') as f:
        image_data = f.read()
    
    # Criar data URL
    base64_data = base64.b64encode(image_data).decode('utf-8')
    data_url = f"data:image/png;base64,{base64_data}"
    
    return data_url, len(base64_data)

def authenticate():
    """Faz login ou registro para obter token de autentica√ß√£o"""
    print_section("AUTENTICA√á√ÉO: Fazendo login no sistema")
    
    # Dados de teste
    user_data = {
        "nome": "Teste OCR",
        "email": "teste@ocr.com",
        "senha": "teste123"
    }
    
    # Tentar fazer login primeiro
    try:
        print("üîÑ Tentando fazer login...")
        response = requests.post(
            f"{BACKEND_URL}/auth/login",
            json={"email": user_data["email"], "senha": user_data["senha"]},
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            token = data.get('token')
            print("‚úÖ Login realizado com sucesso")
            return token
        elif response.status_code == 401:
            print("‚ö†Ô∏è Usu√°rio n√£o existe, tentando registrar...")
        else:
            print(f"‚ö†Ô∏è Erro no login: {response.status_code}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro na requisi√ß√£o de login: {e}")
    
    # Se login falhou, tentar registrar
    try:
        print("üîÑ Tentando registrar usu√°rio...")
        response = requests.post(
            f"{BACKEND_URL}/auth/register",
            json=user_data,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        if response.status_code == 201:
            data = response.json()
            token = data.get('token')
            print("‚úÖ Usu√°rio registrado com sucesso")
            return token
        elif response.status_code == 200:
            # Alguns servi√ßos retornam 200 em vez de 201
            data = response.json()
            token = data.get('token')
            if token:
                print("‚úÖ Usu√°rio registrado com sucesso")
                return token
            else:
                print("‚ö†Ô∏è Registro bem-sucedido mas sem token. Tentando login...")
                # Tentar fazer login ap√≥s registro
                login_response = requests.post(
                    f"{BACKEND_URL}/auth/login",
                    json={"email": user_data["email"], "senha": user_data["senha"]},
                    headers={"Content-Type": "application/json"},
                    timeout=10
                )
                if login_response.status_code == 200:
                    login_data = login_response.json()
                    return login_data.get('token')
                return None
        else:
            print(f"‚ùå Erro no registro: {response.status_code}")
            print(f"   Resposta: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro na requisi√ß√£o de registro: {e}")
        return None

def test_backend_health():
    """Testa se o backend est√° rodando"""
    try:
        # Primeiro teste mais simples
        print("üîÑ Testando conectividade com o backend...")
        response = requests.get(f"{BACKEND_URL}/api/redacoes", timeout=10)
        print(f"   Status: {response.status_code}")
        
        if response.status_code in [200, 401, 404, 500]:  # 401 tamb√©m indica que est√° rodando
            print("‚úÖ Backend est√° rodando")
            return True
        else:
            print(f"‚ùå Backend retornou status inesperado: {response.status_code}")
            return False
            
    except requests.exceptions.ConnectRefused:
        print("‚ùå Conex√£o recusada - Backend n√£o est√° escutando na porta")
        return False
    except requests.exceptions.Timeout:
        print("‚ùå Timeout - Backend n√£o respondeu em 10 segundos")
        return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro de requisi√ß√£o: {e}")
        return False
    """Testa se o backend est√° rodando"""
    try:
        # Primeiro teste mais simples
        print("üîÑ Testando conectividade com o backend...")
        response = requests.get(f"{BACKEND_URL}/api/redacoes", timeout=10)
        print(f"   Status: {response.status_code}")
        
        if response.status_code in [200, 401, 404, 500]:  # 401 tamb√©m indica que est√° rodando
            print("‚úÖ Backend est√° rodando")
            return True
        else:
            print(f"‚ùå Backend retornou status inesperado: {response.status_code}")
            return False
            
    except requests.exceptions.ConnectRefused:
        print("‚ùå Conex√£o recusada - Backend n√£o est√° escutando na porta")
        return False
    except requests.exceptions.Timeout:
        print("‚ùå Timeout - Backend n√£o respondeu em 10 segundos")
        return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro de requisi√ß√£o: {e}")
        return False

def create_redacao_with_image(titulo, data_url, token):
    """Cria uma reda√ß√£o enviando a imagem via API"""
    print_section("ETAPA 1: Enviando imagem para OCR (Azure Vision)")
    
    # Preparar dados da requisi√ß√£o
    payload = {
        "titulo": titulo,
        "imagemUrl": data_url
    }
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    
    try:
        print("üîÑ Enviando requisi√ß√£o POST /api/redacoes...")
        response = requests.post(
            f"{BACKEND_URL}/api/redacoes",
            json=payload,
            headers=headers,
            timeout=60  # OCR pode demorar
        )
        
        if response.status_code == 201:
            redacao = response.json()
            print("‚úÖ Reda√ß√£o criada com sucesso!")
            print(f"   ID: {redacao.get('id')}")
            print(f"   T√≠tulo: {redacao.get('titulo')}")
            
            # Mostrar texto extra√≠do pelo OCR
            texto_extraido = redacao.get('textoExtraido', '')
            if texto_extraido:
                print(f"\nüìÑ TEXTO EXTRA√çDO PELO OCR:")
                print("-" * 60)
                print(texto_extraido)
                print("-" * 60)
                
                # Estat√≠sticas do texto
                palavras = len([p for p in texto_extraido.split() if p.strip()])
                linhas = len([l for l in texto_extraido.split('\n') if l.strip()])
                print(f"üìä Estat√≠sticas:")
                print(f"   ‚Ä¢ Caracteres: {len(texto_extraido)}")
                print(f"   ‚Ä¢ Palavras: {palavras}")
                print(f"   ‚Ä¢ Linhas: {linhas}")
            else:
                print("‚ö†Ô∏è Nenhum texto foi extra√≠do da imagem")
            
            return redacao
        else:
            print(f"‚ùå Erro ao criar reda√ß√£o: {response.status_code}")
            print(f"   Resposta: {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        print("‚è∞ Timeout - OCR demorou mais que 60 segundos")
        return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

def get_analise_enem(redacao_id, token):
    """Obt√©m a an√°lise ENEM da reda√ß√£o"""
    print_section("ETAPA 2: Obtendo corre√ß√µes e an√°lise ENEM")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        print("üîÑ Enviando requisi√ß√£o GET /api/redacoes/{id}/analise-enem...")
        response = requests.get(
            f"{BACKEND_URL}/api/redacoes/{redacao_id}/analise-enem",
            headers=headers,
            timeout=60  # An√°lise LLM pode demorar
        )
        
        if response.status_code == 200:
            data = response.json()
            analise = data.get('analise', {})
            
            print("‚úÖ An√°lise ENEM obtida com sucesso!")
            
            # Mostrar texto formatado/corrigido
            texto_usado = analise.get('textoUsado', '')
            if texto_usado:
                print(f"\nüìù TEXTO CORRIGIDO/FORMATADO:")
                print("-" * 60)
                print(texto_usado)
                print("-" * 60)
            
            # Mostrar corre√ß√µes aplicadas
            correcoes = data.get('correcoes', [])
            if correcoes:
                print(f"\nüõ†Ô∏è CORRE√á√ïES APLICADAS ({len(correcoes)} sugest√µes):")
                for i, correcao in enumerate(correcoes, 1):
                    original = correcao.get('original', '')
                    sugerido = correcao.get('sugerido', '')
                    motivo = correcao.get('motivo', '')
                    print(f"   {i}. \"{original}\" ‚Üí \"{sugerido}\"")
                    if motivo:
                        print(f"      Motivo: {motivo}")
            else:
                print("\nüìÑ Nenhuma corre√ß√£o espec√≠fica foi aplicada")
            
            # Mostrar an√°lise ENEM
            nota_geral = analise.get('notaGeral', 0)
            breakdown = analise.get('breakdown', {})
            
            print(f"\nüéì AN√ÅLISE ENEM COMPLETA:")
            print("-" * 60)
            print(f"üìä NOTA GERAL: {nota_geral:.1f}/10")
            print(f"üìä BREAKDOWN POR COMPET√äNCIA:")
            print(f"   ‚Ä¢ C1 (Dom√≠nio da escrita): {breakdown.get('tese', 0):.1f}/10")
            print(f"   ‚Ä¢ C2 (Compreens√£o do tema): {breakdown.get('argumentos', 0):.1f}/10")
            print(f"   ‚Ä¢ C3 (Argumenta√ß√£o): {breakdown.get('coesao', 0):.1f}/10")
            print(f"   ‚Ä¢ C4 (Repert√≥rio sociocultural): {breakdown.get('repertorio', 0):.1f}/10")
            print(f"   ‚Ä¢ C5 (Norma culta): {breakdown.get('norma', 0):.1f}/10")
            
            # Pontos positivos
            pontos_favoraveis = analise.get('pontosFavoraveis', [])
            if pontos_favoraveis:
                print(f"\n‚úÖ PONTOS POSITIVOS:")
                for i, ponto in enumerate(pontos_favoraveis, 1):
                    print(f"   {i}. {ponto}")
            
            # Pontos a melhorar
            pontos_melhoria = analise.get('pontosMelhoria', [])
            if pontos_melhoria:
                print(f"\n‚ö†Ô∏è PONTOS A MELHORAR:")
                for i, ponto in enumerate(pontos_melhoria, 1):
                    print(f"   {i}. {ponto}")
            
            # Sugest√µes
            sugestoes = analise.get('sugestoes', [])
            if sugestoes:
                print(f"\nüí° SUGEST√ïES:")
                for i, sugestao in enumerate(sugestoes, 1):
                    print(f"   {i}. {sugestao}")
            
            # Coment√°rios gerais
            comentarios = analise.get('comentarios', [])
            if comentarios:
                print(f"\nüìù COMENT√ÅRIOS GERAIS:")
                for i, comentario in enumerate(comentarios, 1):
                    print(f"   {i}. {comentario}")
            
            return analise, correcoes
            
        else:
            print(f"‚ùå Erro ao obter an√°lise: {response.status_code}")
            print(f"   Resposta: {response.text}")
            return None, None
            
    except requests.exceptions.Timeout:
        print("‚è∞ Timeout - An√°lise LLM demorou mais que 60 segundos")
        return None, None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None, None

def test_reanalisar_texto(texto_editado, token):
    """Testa a funcionalidade de rean√°lise com texto editado"""
    print_section("ETAPA 3: Testando rean√°lise com texto editado")
    
    payload = {"texto": texto_editado}
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    
    try:
        print("üîÑ Enviando requisi√ß√£o POST /api/redacoes/reanalyze...")
        response = requests.post(
            f"{BACKEND_URL}/api/redacoes/reanalyze",
            json=payload,
            headers=headers,
            timeout=60
        )
        
        if response.status_code == 200:
            data = response.json()
            analise = data.get('analise', {})
            
            print("‚úÖ Rean√°lise conclu√≠da!")
            print(f"üìä Nova nota ENEM: {analise.get('notaGeral', 0):.1f}/10")
            
            return analise
        else:
            print(f"‚ùå Erro na rean√°lise: {response.status_code}")
            print(f"   Resposta: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

def main():
    """Fun√ß√£o principal do teste"""
    print_header("TESTE DO FLUXO COMPLETO: OCR ‚Üí CORRE√á√ïES ‚Üí AN√ÅLISE ENEM")
    
    # Verificar se o backend est√° rodando
    if not test_backend_health():
        print("\n‚ùå TESTE FALHOU: Backend n√£o est√° acess√≠vel")
        print("   Execute 'npm run dev' no diret√≥rio backend antes de rodar este teste")
        sys.exit(1)
    
    # Fazer autentica√ß√£o
    token = authenticate()
    if not token:
        print("\n‚ùå TESTE FALHOU: N√£o foi poss√≠vel fazer autentica√ß√£o")
        sys.exit(1)
    
    try:
        # 1. Carregar imagem de teste
        print_section("PREPARA√á√ÉO: Carregando imagem de teste")
        data_url, base64_size = load_test_image()
        print(f"‚úÖ Imagem carregada ({base64_size} chars em base64)")
        
        # 2. Criar reda√ß√£o com OCR
        redacao = create_redacao_with_image("Teste Autom√°tico - Python", data_url, token)
        if not redacao:
            print("\n‚ùå TESTE FALHOU: N√£o foi poss√≠vel criar a reda√ß√£o")
            sys.exit(1)
        
        redacao_id = redacao.get('id')
        texto_extraido = redacao.get('textoExtraido', '')
        
        # Aguardar um pouco para processamento
        print("\n‚è≥ Aguardando processamento completo...")
        time.sleep(2)
        
        # 3. Obter an√°lise ENEM
        analise, correcoes = get_analise_enem(redacao_id, token)
        if not analise:
            print("\n‚ùå TESTE FALHOU: N√£o foi poss√≠vel obter an√°lise ENEM")
            sys.exit(1)
        
        # 4. Teste opcional: rean√°lise com texto editado
        if texto_extraido:
            texto_editado = texto_extraido + "\n\nEste √© um par√°grafo adicional para testar a rean√°lise."
            reanalisar = test_reanalisar_texto(texto_editado, token)
        
        # 5. Resumo final
        print_header("RESUMO DO TESTE")
        palavras_extraidas = len([p for p in texto_extraido.split() if p.strip()]) if texto_extraido else 0
        num_correcoes = len(correcoes) if correcoes else 0
        nota_final = analise.get('notaGeral', 0)
        
        print(f"üì∑ OCR: {palavras_extraidas} palavras extra√≠das")
        print(f"üìù Corre√ß√µes: {num_correcoes} sugest√µes aplicadas")
        print(f"üéì Nota ENEM: {nota_final:.1f}/10")
        print(f"üÜî ID da reda√ß√£o criada: {redacao_id}")
        print("‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
        
    except FileNotFoundError as e:
        print(f"\n‚ùå ERRO: {e}")
        print("   Verifique se a imagem teste.png existe no diret√≥rio image/")
        sys.exit(1)
        
    except Exception as e:
        print(f"\n‚ùå ERRO INESPERADO: {e}")
        print(f"   Tipo: {type(e).__name__}")
        sys.exit(1)

if __name__ == "__main__":
    main()