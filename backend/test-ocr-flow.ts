import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

// Importar servi√ßos diretamente
import { extrairTextoDaImagem } from './src/services/ocrService';
import { formatarTextoComLLM, analisarEnem } from './src/services/ennAnalysisService';

const __dirname = process.cwd();

async function testarFluxoCompleto() {
  console.log('üî¨ TESTE DO FLUXO COMPLETO: OCR ‚Üí CORRE√á√ïES ‚Üí AN√ÅLISE ENEM');
  console.log('=' .repeat(80));
  
  try {
    // 1. Testar OCR com Azure Vision
    console.log('\nüì∑ ETAPA 1: Lendo imagem com Azure Vision...');
    const imagePath = path.join(__dirname, 'image', 'teste.png');
    
    if (!fs.existsSync(imagePath)) {
      throw new Error(`Imagem n√£o encontrada: ${imagePath}`);
    }
    
    console.log(`Arquivo de imagem: ${imagePath}`);
    console.log(`Tamanho do arquivo: ${(fs.statSync(imagePath).size / 1024).toFixed(2)} KB`);
    
    // Converter para data URL como o frontend faria
    const imageBuffer = fs.readFileSync(imagePath);
    const base64Data = imageBuffer.toString('base64');
    const dataUrl = `data:image/png;base64,${base64Data}`;
    
    console.log('\nüîç Iniciando OCR...');
    const ocrResult = await extrairTextoDaImagem(dataUrl);
    const textoExtraido = ocrResult.text;
    
    console.log('\n‚úÖ TEXTO EXTRA√çDO PELO OCR:');
    console.log('-'.repeat(60));
    console.log(textoExtraido);
    console.log('-'.repeat(60));
    console.log(`Engine usado: ${ocrResult.engine || 'desconhecido'}`);
    console.log(`Confian√ßa: ${ocrResult.confidence || 0}%`);
    console.log(`Caracteres: ${textoExtraido.length}`);
    console.log(`Palavras: ${textoExtraido.split(/\s+/).filter((p: string) => p.trim().length > 0).length}`);
    console.log(`Linhas: ${textoExtraido.split('\n').filter((l: string) => l.trim().length > 0).length}`);
    
    if (!textoExtraido || textoExtraido.trim().length === 0) {
      throw new Error('OCR n√£o extraiu nenhum texto da imagem');
    }
    
    // 2. Testar formata√ß√£o/corre√ß√µes com GPT
    console.log('\nüìù ETAPA 2: Formatando e corrigindo texto com GPT...');
    const resultadoFormatacao = await formatarTextoComLLM(textoExtraido);
    
    console.log('\n‚úÖ TEXTO CORRIGIDO/FORMATADO:');
    console.log('-'.repeat(60));
    console.log(resultadoFormatacao.textoFormatado);
    console.log('-'.repeat(60));
    
    if (resultadoFormatacao.correcoes && resultadoFormatacao.correcoes.length > 0) {
      console.log('\nüõ†Ô∏è CORRE√á√ïES APLICADAS:');
      resultadoFormatacao.correcoes.forEach((c, i) => {
        console.log(`${i + 1}. "${c.original}" ‚Üí "${c.sugerido}"`);
        if (c.motivo) console.log(`   Motivo: ${c.motivo}`);
      });
    } else {
      console.log('\nüìÑ Nenhuma corre√ß√£o espec√≠fica foi sugerida pelo GPT');
    }
    
    // 3. Testar an√°lise ENEM
    console.log('\nüéì ETAPA 3: Analisando reda√ß√£o com crit√©rios ENEM...');
    const textoParaAnalise = resultadoFormatacao.textoFormatado || textoExtraido;
    const analiseEnem = await analisarEnem(textoParaAnalise);
    
    console.log('\n‚úÖ AN√ÅLISE ENEM COMPLETA:');
    console.log('-'.repeat(60));
    console.log(`üìä NOTA GERAL: ${analiseEnem.notaGeral.toFixed(1)}/10`);
    console.log(`üìä BREAKDOWN POR COMPET√äNCIA:`);
    console.log(`   ‚Ä¢ C1 (Dom√≠nio da escrita): ${analiseEnem.breakdown.tese.toFixed(1)}/10`);
    console.log(`   ‚Ä¢ C2 (Compreens√£o do tema): ${analiseEnem.breakdown.argumentos.toFixed(1)}/10`);
    console.log(`   ‚Ä¢ C3 (Argumenta√ß√£o): ${analiseEnem.breakdown.coesao.toFixed(1)}/10`);
    console.log(`   ‚Ä¢ C4 (Repert√≥rio sociocultural): ${analiseEnem.breakdown.repertorio.toFixed(1)}/10`);
    console.log(`   ‚Ä¢ C5 (Norma culta): ${analiseEnem.breakdown.norma.toFixed(1)}/10`);
    
    if (analiseEnem.pontosFavoraveis && analiseEnem.pontosFavoraveis.length > 0) {
      console.log('\n‚úÖ PONTOS POSITIVOS:');
      analiseEnem.pontosFavoraveis.forEach((p, i) => {
        console.log(`   ${i + 1}. ${p}`);
      });
    }
    
    if (analiseEnem.pontosMelhoria && analiseEnem.pontosMelhoria.length > 0) {
      console.log('\n‚ö†Ô∏è PONTOS A MELHORAR:');
      analiseEnem.pontosMelhoria.forEach((p, i) => {
        console.log(`   ${i + 1}. ${p}`);
      });
    }
    
    if (analiseEnem.sugestoes && analiseEnem.sugestoes.length > 0) {
      console.log('\nüí° SUGEST√ïES:');
      analiseEnem.sugestoes.forEach((s, i) => {
        console.log(`   ${i + 1}. ${s}`);
      });
    }
    
    if (analiseEnem.comentarios && analiseEnem.comentarios.length > 0) {
      console.log('\nüìù COMENT√ÅRIOS GERAIS:');
      analiseEnem.comentarios.forEach((c, i) => {
        console.log(`   ${i + 1}. ${c}`);
      });
    }
    
    // 4. Resumo final
    console.log('\n' + '='.repeat(80));
    console.log('üìã RESUMO DO TESTE:');
    console.log(`üì∑ OCR: ${textoExtraido.split(/\s+/).filter((p: string) => p.trim().length > 0).length} palavras extra√≠das`);
    console.log(`üîß Engine: ${ocrResult.engine} (confian√ßa: ${ocrResult.confidence}%)`);
    console.log(`üìù Corre√ß√µes: ${resultadoFormatacao.correcoes ? resultadoFormatacao.correcoes.length : 0} sugest√µes`);
    console.log(`üéì Nota ENEM: ${analiseEnem.notaGeral.toFixed(1)}/10`);
    console.log('‚úÖ Teste conclu√≠do com sucesso!');
    
  } catch (error: any) {
    console.error('\n‚ùå ERRO NO TESTE:');
    console.error('Tipo:', error.constructor.name);
    console.error('Mensagem:', error.message);
    if (error.stack) {
      console.error('Stack trace:', error.stack);
    }
    
    // Informa√ß√µes de debug adicionais
    console.log('\nüîß INFORMA√á√ïES DE DEBUG:');
    console.log('- Verifique se as vari√°veis de ambiente est√£o configuradas (.env)');
    console.log('- AZURE_OPENAI_ENDPOINT, AZURE_OPENAI_KEY, AZURE_OPENAI_DEPLOYMENT');
    console.log('- Ou OPENAI_API_KEY para fallback');
    console.log('- Teste de conectividade com os servi√ßos externos');
    
    process.exit(1);
  }
}

// Verificar configura√ß√£o e executar
console.log('Verificando configura√ß√£o:');
console.log('- Azure endpoint:', process.env.AZURE_OPENAI_ENDPOINT ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
console.log('- Azure key:', process.env.AZURE_OPENAI_KEY ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
console.log('- Azure deployment:', process.env.AZURE_OPENAI_DEPLOYMENT ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
console.log('- OpenAI key (fallback):', process.env.OPENAI_API_KEY ? '‚úÖ Configurado' : '‚ùå N√£o configurado');

testarFluxoCompleto();